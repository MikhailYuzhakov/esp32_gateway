#include "ESP-FTP-Server-Lib.h"
#include <LittleFS.h>

class FileSystem
{
    private:
        FTPServer ftpSrv; 
    public:
        bool init() {
            if (LittleFS.begin()) {
                return true;
            } else {
                return false;
            }
        }

        String readDirectory(String path) {
            String fileList;
            File root = LittleFS.open(path);
            if (!root) return "Failed to open directory";
            if (!root.isDirectory()) return "Path not a directory";
            File file = root.openNextFile();
            while (file) {
                fileList += "  " + String(file.name()) + " (" + String(file.size()) + " bytes)\n";
                file = root.openNextFile();
            }
            return fileList;
        }

        void buildFileTree(const String &dirPath, int depth, String &output) {
            // –î–æ–±–∞–≤–ª—è–µ–º "/" –≤ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            String absPath = dirPath;
            if (!absPath.startsWith("/")) {
                absPath = "/" + absPath;
            }
        
            File dir = LittleFS.open(absPath.c_str());
            if (!dir || !dir.isDirectory()) {
                output += "[ERROR] Can't open dir: " + absPath + "\n";
                return;
            }
        
            File file = dir.openNextFile();
            while (file) {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
                for (int i = 0; i < depth; i++) {
                    output += "  ";
                }
        
                String fileName = file.name();
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                if (!fileName.startsWith("/")) {
                    fileName = absPath + (absPath.endsWith("/") ? "" : "/") + fileName;
                }
        
                if (file.isDirectory()) {
                    output += "üìÅ " + fileName + "\n";
                    buildFileTree(fileName, depth + 1, output);  // –ü–µ—Ä–µ–¥–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                } else {
                    output += "üìÑ " + fileName + " (" + String(file.size()) + " bytes)\n";
                }
        
                file = dir.openNextFile();
            }
            dir.close();
        }

        String getFile(String path) {
            File file = LittleFS.open(path, "r");

            if (!file) {
                return "File not found";
            } else {
                String content = file.readString();
                file.close();
                return content;
            }
        }

        void saveFile(String content, String path) {
            File file = LittleFS.open(path, "w");
            file.print(content);
            file.close();
        }

        String getProbesConfigs(String probesConfigPath) {
            String conf = "[";
            bool firstFile = true; // –§–ª–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ - —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ—à–∏ –≤ –∫–æ–Ω—Ü–µ
            if (probesConfigPath.endsWith("/")) {
                probesConfigPath.remove(probesConfigPath.length()-1);
            }

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥
            File root = LittleFS.open(probesConfigPath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —á—Ç–æ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if (!root) {
                return String("Error: Failed to open path ") + probesConfigPath;
            }
            if (!root.isDirectory()) {
                root.close();
                return String("Error: Path ") + probesConfigPath + " is not a directory";
            }

            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
            File file = root.openNextFile();
            while (file) {
                String fileName = file.name();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if (fileName.startsWith("id") && fileName.endsWith(".json")) {
                    if (!firstFile) {
                        conf += ", ";
                    }

                    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    String filePath = probesConfigPath + "/" + fileName;
                    String fileContent = getFile(filePath);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
                    if (fileContent != "null" && fileContent.length() > 0) {
                        conf += fileContent;
                        firstFile = false;
                    }
                }
                file.close();
                file = root.openNextFile();
            }

            root.close();
            conf += "]";
            
            return conf;
        }

        bool ftpServerInit(String ftpLogin, String ftpPass) {
            ftpSrv.addUser(ftpLogin, ftpPass);
            ftpSrv.addFilesystem("LittleFS", &LittleFS);
            return ftpSrv.begin();
        }

        void ftpHandle() {
            ftpSrv.handle();
        }
};